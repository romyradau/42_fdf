I create the fdf struct
I check the maps input (arguments, .fdf)
	if no, error
I create the map struct
get_map_dimensions gives back a t_map, so 
I create a new t_map
I set all map values to 0
I check if all x_values are of same sum
	if no, error
I set x_max and y_max
Now that I have the dimensions 
I malloc the **points pointer
	And than its subpointers
In set_values
I set for each mapline x, y, z and color
Finally I adjust the camera aka perception, aka display of the Xwin
We're back in the main
mlx_init initialises a pointer to the mlx library
mlx_new_window creates a window with specific WIDTH, HEIGHT
mlx_key_hook detects if a certain key gets pressed
	it creates a pointer to a function
	which either changes the z altitude
	or exits the program with esc key
mlx_new_image creates a new image on which to 'predraw'
mlx_get_data_addr sets informational data somewhere in memory
Now we can render the actual image
First every pixel in the window gets set to black
	as we may need it when a +/- key is pressed
	otherwise the old image stays in the mlx_new_window
	(is there any other chance, destroy image?)
Second we go to each point of the map from left to right and up to down
first connect it to it's right if existing neighbor 
and than if existing to its neighbor below it
until all points are connected

The actual 'drawing'
draw_line
takes a startpoint/endpoint
calcualtes if the next pixel should move more to the rasta x or y axes?, until endpoint is reached 
but before that the start/endpoint is altered in dimensions
(harm needs to explain o_O)
we somehow get rid of the z_value
point.x/y are changed in two different ways
and then the iso_projection is done so x/y are put in a different spot
and then x/y are again altered???

so basically 
draw_line gets all the map_points, dimensions alters the spot where they are, and connects them 
finally mlx_put_imgage_to_window hands over the image to the actual window
mlx_loop detects keyhooks e.g.



